#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter

Introduction
\layout Standard

This histogram package originated from the ARCS 
\begin_inset Foot
collapsed true

\layout Standard

A direct-geometry time-of-flight neutron spectrometry
\end_inset 

 reduction package, which can be used to reduce inelastic neutron scattering
 data to 
\begin_inset Formula $S(Q,E)$
\end_inset 

.
 
\layout Standard

Histograms are common in scientific and business computations.
 In experimental science, results of measurements are usually histograms.
 The purpose of the histogram package is to provide a python representation
 of histogram.
 One difficulty of implementing histogram is that a histogram usually contains
 a large chunk of data, and such data can be represented in various ways
 (c/fortran/c++).
 A goal here is to factor out that detail so that the histogram class is
 independent of array implementations.
\layout Standard

Histogram itself is mostly a container of information, including axes, data,
 error bars, etc.
 Histogram package is mostly intended for providing this data structure,
 but it also provides a simple GUI interface to look at the data in the
 histogram.
\layout Standard

For convenience, numerical operators like 
\begin_inset Formula $+,-,\times,\div$
\end_inset 

, and simple math functions like 
\shape italic 
sum
\shape default 
 and 
\shape italic 
average
\shape default 
 should be provided for histogram class.
 Multiple-dimensional histogram is quite common in scientific computing,
 and should be supported.
 Slicing is an important operation that is very useful 
\begin_inset Foot
collapsed true

\layout Standard

For example, high dimensional histogram could be reduced to lower dimension
 for better understanding using slicing.
\end_inset 

 and should be supported too.
 It is very important that error bars are propagated in any of these operations.
\layout Chapter

Usage of histogram (Use cases)
\layout Standard


\shape italic 
Programatically
\layout Standard

We expect histogram to be used in basic data analysis procedures.
 Reduction is one such procedure that transform measured histograms to histogram
s that are more human-understandable.
 A typical case of reduction is to reduce a diffraction raw data, 
\begin_inset Formula $I(pixel)$
\end_inset 

, to a diffraction pattern, 
\begin_inset Formula $I(2\theta)$
\end_inset 

.
 In the procedure of reduction, various kind of operations will be done
 to histograms, including numerical operations, slicings, and directly accessing
 big data arrays in the histogram:
\layout Paragraph

Numerical operations:
\layout LyX-Code

h *= 3.1
\layout LyX-Code

h += h1
\layout LyX-Code

h3 = h1 - h2
\layout Paragraph

Slicing:
\layout LyX-Code

sh1 = h.getSubHist( Range(1.5, 3.5) )
\layout LyX-Code

sh2 = h.getSubHist( Range(1, 3.5), 10.0 )
\layout Paragraph

Acessing data:
\layout LyX-Code

datastorage = h.data().zs().values.numbers # an NdArray instance
\layout LyX-Code

errsstorage = h.errors().zs().values.numbers # an NdArray instance
\layout Standard


\shape italic 
Interactively
\shape default 
 
\layout Standard

We expect that users might want to manipulate histograms interactively and
 perform numerical operations and slicings.
 Users will be able to perform those operations in the python command line
 environment or the histogram GUI.
\layout Standard

Users of histogram might also like to interactively view and investigate
 a small portion of a histogram.
 Plotting and zooming functionalities are needed.
 Slicing capability is useful too.
 Users will be able to perform those operations in the python command line
 environment or the histogram GUI.
\layout Standard

Here is a list of operations that are useful:
\layout Itemize

Load histogram from file 
\layout Itemize

View 1-D histogram 
\layout Itemize

View 2-D histogram 
\layout Itemize

Customize plot 
\layout Itemize

Change title 
\layout Itemize

Change axis labels 
\layout Itemize

Save image to a file 
\layout Itemize

Make slices of histograms
\layout Chapter

Design
\layout Standard

To further this discussion, we need to first clearly define what do we mean
 here by "histogram".
 The result of any measurement is actually a histogram, by which we mean
 we have data in some bins.
 For example, if we measure a spectrum with 
\begin_inset Formula $x$
\end_inset 

-axis being time-of-flight, we will get an array of counts, while each element
 in that array represents the number of counts measured in a predefined
 time slot (bin).
 This array of counts can be approximated by
\layout Standard


\begin_inset Formula \begin{equation}
\frac{dI}{dx}(x)\Delta x\end{equation}

\end_inset 

 where 
\begin_inset Formula $\frac{dI}{dx}$
\end_inset 

 is a density function and 
\begin_inset Formula $\Delta x$
\end_inset 

 is bin size.
 This observation forms the base of our design of histogram classes.
\layout Standard

In a more mathematical form, we can describe a histogram as a mapping from
 an area (rectagular) in a phase space to a 
\begin_inset Formula $\Re^{2}$
\end_inset 

:
\begin_inset Formula \[
\mathcal{D}\rightarrow\Re^{2}\]

\end_inset 

This statement is not complete without following constraints:
\layout Enumerate

in each direction (axis) of the phase space, the axis is discretized to
 
\series bold 
bins
\series default 
;
\layout Enumerate

the 
\begin_inset Formula $\Re^{2}$
\end_inset 

 represents the 2-tuple of the data and the error bar;
\layout Standard

It is apparent that two kinds of information are critical here:
\layout Enumerate

the big multiple-dimensional array that keeps the data and the error bars.
 It maps integer indexes to floating numbers of data or error bar;
\layout Enumerate

the axis that holds the information about bins.
 It maps bins to integer indexes.
\layout Standard

Therefore, we need at least two data structures: NdArray and Axis:
\layout Itemize

NdArray: map 
\begin_inset Formula $N$
\end_inset 

-tuple of integer indexes to a floating number.
 Here 
\begin_inset Formula $N$
\end_inset 

 is the number of dimension.
\layout Itemize

Axis: map bins of physical quantity to index.
\layout Standard

Let us rethink this break-down a little bit more to see if it is reasonable.
 First off, NdArray is a data structure that is pretty fundamental.
 It is just a multiple-dimensional array.
 I don't think we can break it down more.
 We may want to add capabilities like numerical operators, iterators, slicing
 mechanisms to this data structure, because all of them are needed by histogram,
 and they certainly can be useful for other applications.
 The remained data structure, Axis, deserves more thoughts.
 Axis is one thing that brings physical meaning to histogram.
 How can we attach physical meaning to an axis? An axis is usually associated
 with a name and a unit to denote its physical meaning.
 For example, name =
\begin_inset Quotes eld
\end_inset 

Neutron Energy
\begin_inset Quotes erd
\end_inset 

, unit=
\begin_inset Quotes eld
\end_inset 

meV
\begin_inset Quotes erd
\end_inset 

 should give us a pretty good idea of the meaning of an axis, while at the
 same time it perfectly describes a physical quantity.
 So we probably catch one very important concept here: 
\begin_inset Quotes eld
\end_inset 

physical quantity
\begin_inset Quotes erd
\end_inset 

.
 
\layout Standard

There is another problem that we have not been able to think through carefully.
 Up to this point, we think of an axis as a mapping from bins to indexes.
 But if we think about Axis without the context of 
\begin_inset Quotes eld
\end_inset 

histogram
\begin_inset Quotes erd
\end_inset 

, then we find that the notion of 
\begin_inset Quotes eld
\end_inset 

bins
\begin_inset Quotes erd
\end_inset 

 are actually special for Histogram.
 In the most common scenario, we are dealing with ticks instead of bins
 for axis.
 How should we handle that?
\layout Standard

Let us leave the second question here and first start thinking about 
\begin_inset Quotes eld
\end_inset 

physical quantity
\begin_inset Quotes erd
\end_inset 

.
\layout Section

Physical Quantity
\layout Standard

What is a physical quantity? Things like 
\begin_inset Formula $t$
\end_inset 

 (time), 
\begin_inset Formula $x$
\end_inset 

 (position), 
\begin_inset Formula $V$
\end_inset 

 (electric potential) are physical quantities.
 It sounds a simple concept to us, but in programming we always want to
 have a more rigorous analysis.
 
\layout Standard

Let us starts with a simple physics problem:
\layout Quote

Problem 1: A free falling ball starts falling at 
\begin_inset Formula $t=0s$
\end_inset 

 with initial speed 
\begin_inset Formula $v=0m/s$
\end_inset 

.
 We know its acceleration is 
\begin_inset Formula $g=9.8m/s^{2}$
\end_inset 

.
 Please calculate the distances this ball falls at 
\begin_inset Formula $t=1,\:,3\:,7$
\end_inset 

seconds.
 
\layout Standard

Clearly, 
\begin_inset Formula $t$
\end_inset 

 is a physical quantity, time.
 An expression 
\begin_inset Formula \[
t=0s\]

\end_inset 

tells us that the physical quantity 
\begin_inset Formula $t$
\end_inset 

 takes the value 
\series bold 
0 seconds
\series default 
.
 It sounds a good idea to define a class 
\shape italic 
PhysicalQuantity
\shape default 
.
 Aparently a physical quantity has a name, for example, 
\begin_inset Quotes eld
\end_inset 


\shape italic 
t
\shape default 

\begin_inset Quotes erd
\end_inset 

.
 
\layout Standard

A physical quantity can take a value.
 For physical quantity 
\begin_inset Formula $t$
\end_inset 

, 
\begin_inset Formula $0s$
\end_inset 

 is a valid value, while 
\begin_inset Quotes eld
\end_inset 

hello
\begin_inset Quotes erd
\end_inset 

 is not.
 So a 
\shape italic 
PhysicalQuantity
\shape default 
 instance better has a method to verify whether a value is valid.
\layout Standard

The UML class diagram for 
\shape italic 
PhysicalQuantity
\shape default 
 is shown in Figure 
\begin_inset LatexCommand \ref{cap:PhysicalQuantity-class-diagram}

\end_inset 

, in which we added a method to compare physical quantities.
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename physicalquantity.eps
	width 5cm
	keepAspectRatio

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{cap:PhysicalQuantity-class-diagram}

\end_inset 

Initial draft of PhysicalQuantity class diagram
\end_inset 


\layout Standard

In the scope of our histogram package, there are quantities that are not
 physical.
 For example, a detector ID is not really a physical quantity.
 It would be a better design if we consider physical quantity in a broader
 sense.
 So we introduced AbstractQuantity, and made PhysicalQuantity a subclass.
 Figure 
\begin_inset LatexCommand \ref{cap:Quantity-classes}

\end_inset 

 has a more complete picture.
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename quantity.eps
	width 10cm
	keepAspectRatio

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{cap:Quantity-classes}

\end_inset 

A more complete class diagram for Quantity classes
\end_inset 


\layout Section

Physical value containers
\layout Standard

Now let us get back to Problem 1.
 The expression 
\begin_inset Formula \[
t=0s\]

\end_inset 

means the physical quantity 
\begin_inset Formula $t$
\end_inset 

 takes the value 
\begin_inset Formula $0s$
\end_inset 

.
 How do we do it programatically? In python (with pyre), we could say
\layout LyX-Code

>>> from pyre.units.SI import second
\layout LyX-Code

>>> t = 0 * second
\layout Standard

which sounds pretty good (we will get back to this later...) 
\layout Standard

Sometimes, we might need a list of values for a quantity.
 For example in Problem 1, we have a list of values for 
\begin_inset Formula $t$
\end_inset 

: 
\begin_inset Formula $t=1,\:,3\:,7$
\end_inset 

seconds, for which we need to calculate traveling distances of the ball.
 We could represent such values as
\layout LyX-Code

>>> ts = [1*second, 3*second, 7*second]
\layout Standard

but we could optimize that by saving the unit 
\begin_inset Quotes eld
\end_inset 

second
\begin_inset Quotes erd
\end_inset 

 separately.
 We introduced class 
\shape italic 
PhysicalValueList
\shape default 
 for this purpose, and it should have the same behavior as a normal list.
 Similarly, we will need a multiple-dimensional array of physical values,
 and that is handled by class 
\shape italic 
PhysicalValueNdArray
\shape default 
.
 Those two classes are shown in Figure 
\begin_inset LatexCommand \ref{cap:Container-of-values-of-physical-quantity}

\end_inset 

.
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename physicalvalues.eps
	width 14cm
	keepAspectRatio

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{cap:Container-of-values-of-physical-quantity}

\end_inset 

Container of values of physical quantity
\end_inset 


\layout Section

Binding of physical quantity and its value(s)
\layout Standard

Let us stare at this expression again:
\layout Standard


\begin_inset Formula \begin{equation}
t=0s\label{eq:t0s}\end{equation}

\end_inset 

The python code
\layout LyX-Code

>>> from pyre.units.SI import second
\layout LyX-Code

>>> t = 0 * second
\layout Standard

does not really form a full description of expression 
\begin_inset LatexCommand \ref{eq:t0s}

\end_inset 

.
 It actually just represents a value, and does not establish a relationship
 between a quantity and a value.
 
\layout Standard

Thus, we introduce several 
\begin_inset Quotes eld
\end_inset 

binding
\begin_inset Quotes erd
\end_inset 

 classes to bind a (physical) quantity with its value(s): 
\shape italic 
QuantitySingleValue
\shape default 
, 
\shape italic 
QuantityValueList
\shape default 
, 
\shape italic 
PhysicalQuantityValueNdArray
\shape default 
.
 Their class diagrams are in Figure 
\begin_inset LatexCommand \ref{cap:Binding-of-physical-quantity-and-its-values}

\end_inset 

.
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename bindingofphysicalquantityanditsvalues.eps
	width 16cm
	keepAspectRatio

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{cap:Binding-of-physical-quantity-and-its-values}

\end_inset 

Binding of physical quantiy and its value(s)
\end_inset 


\layout Standard

A few things to note here:
\layout Itemize

A 
\shape italic 
QuantitySingleValue
\shape default 
 binds any quantity and a value.
 The quantity can be a physical quantiy or any other quantity we like.
 Same for 
\shape italic 
QuantiyValueList
\shape default 
, in which we bind any quantity to a list of its values.
\layout Itemize

For physical quantity, it is better to bind a physical quantity with a
\shape italic 
 PhysicalValueList
\shape default 
 instance (instead of a normal list of physical values) to form a 
\shape italic 
QuantityValueList
\shape default 
 instance, in order to improve performance.
\layout Itemize


\shape italic 
PhysicalQuantityValueNdArray
\shape default 
 binds a physical quantity with a multiple-dimensional array of physical
 values.
 Please note that there is no 
\shape italic 
QuantityValueNdArray
\shape default 
, so an aribitrary quantity may not be binded to a multiple-dimensional
 array of its values.
 Only a physical quantity can be binded with a multiple-dimensional array
 of its values.
 This is because we are not yet supporting a generic NdArray that can take
 values of any quantity, although we could simply use nested python list.
 
\layout Section

Axis
\layout Standard

Now we have many underlying data structures.
 Is it now natural to define axis?
\layout Standard

An axis represents a quantity, be it a physical quantiy like energy, or
 a non-physical quantity like detector ID.
 An axis has ticks, which is a list of values of the corresponding physical
 quantity.
 So, an axis is a binding of physical quantity and its values.
 Now that we already have 
\shape italic 
QuantityValueList
\shape default 
, it is simple.
 Either it could be a 
\shape italic 
QuantityValueList
\shape default 
 instance, or it might use one.
 Figure 
\begin_inset LatexCommand \ref{cap:Axis-class-diagram}

\end_inset 

 gives details of the base class AbstractDiscreteAxis and its subclasses.
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename axis.eps
	width 16cm
	keepAspectRatio

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{cap:Axis-class-diagram}

\end_inset 

UML diagram for Axis classes
\end_inset 


\layout Standard

A few more points:
\layout Itemize

An axis should be able to map value to index, that is what the method 
\shape italic 
index
\shape default 
 for.
\layout Itemize

Some quantities are discrete by nature, including detector ID, pixel ID,
 and quantized physical quantities.
 The Axis class of such quantity is named 
\shape italic 
GenuineDiscreteAxis
\shape default 
.
\layout Itemize

Physical quantities that are continuous by nature are represented by 
\shape italic 
DiscretizedAxis
\shape default 
.
 Differentiate this case from the 
\shape italic 
GenuineDiscreteAxis
\shape default 
 will make it difficult for us to make mistakes in, for example, doing interpola
tion.
\layout Itemize

Axis could be defined as bins instead of ticks, this is what 
\shape italic 
AxisWithBins
\shape default 
 for.
\layout Section

GridData
\layout Standard

In summary, we have identified several data structures up to this point.
 We would like to build something useful on top of them.
 Let us see how far away we are from 
\shape italic 
Histogram
\shape default 
.
 Mathematically, we can denote a histogram as a collection of 
\layout Standard


\begin_inset Formula \[
I(x_{i},\: y_{j},\: z_{k},\:...)\]

\end_inset 

and
\begin_inset Formula \[
\sigma_{I}^{2}(x_{i},\: y_{j},\: z_{k},\:...)\]

\end_inset 

where 
\begin_inset Formula $i,j,k,...$
\end_inset 

 are indexes of values for all axes, 
\begin_inset Formula $x_{i},y_{j},z_{k},...$
\end_inset 

 are values of quantities.
 Either of them takes a form that looks like
\begin_inset Formula \[
f_{ijk...}=\phi(x_{i},\: y_{j},\: z_{k},\:...)\]

\end_inset 

Here, 
\begin_inset Formula $f;\: x,\: y,z,\:...$
\end_inset 

 all represent some quantities.
 It is a common situation in physics that we know values of all of the following
\begin_inset Formula \begin{eqnarray*}
 & \{ x_{i}\},\:\{ y_{j}\},\:\{ z_{k}\},\;...\\
 & f_{ijk...}\end{eqnarray*}

\end_inset 

and we want to be able to approximate the mapping 
\begin_inset Formula $\phi:\; x,y,z,...\rightarrow f$
\end_inset 

 from those data.
 We ask the class GridData (maybe should find a better name) to do partially
 this work for us.
 Class diagram for GridData and its subclasses is presented in Figure 
\begin_inset LatexCommand \ref{cap:GridData-class-diagram}

\end_inset 

.
\layout Standard


\begin_inset Float figure
wide false
collapsed true

\layout Standard
\align center 

\begin_inset Graphics
	filename GridData.eps
	width 16cm
	keepAspectRatio

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{cap:GridData-class-diagram}

\end_inset 

 UML diagram for GridData classes
\end_inset 


\layout Standard

Details of 
\shape italic 
GridData
\shape default 
:
\layout Enumerate

Constructor takes two inputs: 
\begin_deeper 
\layout Enumerate

a list of axes, and
\layout Enumerate

the binding of physical quantity 
\begin_inset Formula $f$
\end_inset 

 with a multiple dimensional array of values of 
\begin_inset Formula $f$
\end_inset 

, i.e.
 
\begin_inset Formula $f_{ijk...}$
\end_inset 

 (we actually call it 
\begin_inset Formula $z$
\end_inset 

 in 
\shape italic 
GridData
\shape default 
 class).
 
\end_deeper 
\layout Enumerate

Method 
\begin_inset Quotes eld
\end_inset 

axes
\begin_inset Quotes erd
\end_inset 

 return the list of axes.
\layout Enumerate

Method 
\begin_inset Quotes eld
\end_inset 

zs
\begin_inset Quotes erd
\end_inset 

 returns the binding of physical quantity 
\begin_inset Formula $f$
\end_inset 

 and values 
\begin_inset Formula $f_{ijk...}$
\end_inset 

.
\layout Enumerate

Method getz evaluates 
\begin_inset Formula $f$
\end_inset 

 given coordinates.
 No interpolation is available.
\layout Enumerate

Method setz set 
\begin_inset Formula $f$
\end_inset 

 to a new value at given coordinates
\layout Enumerate

Method getSubGrid returns a new GridData in the specified phase space.
\layout Enumerate

Method setSubGrid set 
\begin_inset Formula $f$
\end_inset 

 in a specified phase space to be equal to the given GridData instance
\layout Standard

Two subclasses of DataGrid is defined.
 A DataOnCells instance represent data defined on axes that have bins, or
 are discrete by nature.
 This is useful for the following two cases:
\layout Enumerate


\begin_inset Formula $f_{ijk...}$
\end_inset 

 represents an averaged value of some physical quantity in the cell bounded
 by the corresponding bins
\layout Enumerate


\begin_inset Formula $f_{ijk...}$
\end_inset 

 represents integrated value of some physical quantity in the cell bounded
 by the corresponding bins
\layout Standard

A DataOnVertexGrid is useful for the case in which 
\begin_inset Formula $f_{ijk...}$
\end_inset 

 represents the value of some physical quantity at the vertex.
\layout Section

Histogram
\layout Standard

Now we finally have histogram.
 A histogram is simply a container of two DataOnCells instances.
 It will need some convenient functions, but generally it is pretty simple
 (Figure 
\begin_inset LatexCommand \ref{cap:Histogram-class}

\end_inset 

).
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename histogram.eps
	width 14cm
	keepAspectRatio

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{cap:Histogram-class}

\end_inset 

 Histogram class
\end_inset 


\layout Standard

Things to note:
\layout Itemize

Numerical operations on histogram will be implemented by performing numerical
 operations on PhysicalValueNdArray.
 Numerical operations on PhysicalValueNdArray are implemented by performing
 numerical operations on NdArray instances.
 Error propagations will be automatically performed for histograms.
\layout Itemize

NdArray has an abstract interface.
 Histograms and PhysicalValueNdArray only use those interfaces.
 Solid implementations of NdArray must provide those methods defined in
 the abstract interface.
\layout Itemize

Slicing on GridData are implemented by performing slicing on its 
\begin_inset Quotes eld
\end_inset 


\shape italic 
zs
\shape default 

\begin_inset Quotes erd
\end_inset 

 and axes.
 
\layout Itemize

Histogram can only represent a rectangular region in a phase space.
 This is usually good enough.
 Sometimes, however, we have to represent a dataset in a non-rectangular
 region in a phase space.
 In those cases, if the non-rectangular region can be easily divided to
 several rectangular regions, we can use HistCollection.
 HistCollection is a collection of histograms.
\the_end
